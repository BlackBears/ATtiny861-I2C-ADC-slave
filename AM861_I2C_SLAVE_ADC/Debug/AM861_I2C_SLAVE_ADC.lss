
AM861_I2C_SLAVE_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000028  00800060  00800060  00000324  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000102  00000000  00000000  00000ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003a7  00000000  00000000  00000bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001dc  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f7  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001644  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f2  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009d  00000000  00000000  000019e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000005d  00000000  00000000  00001a83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	8b c0       	rjmp	.+278    	; 0x126 <__vector_7>
  10:	a6 c0       	rjmp	.+332    	; 0x15e <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d2 e0       	ldi	r29, 0x02	; 2
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a8 38       	cpi	r26, 0x88	; 136
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	13 d0       	rcall	.+38     	; 0x6a <main>
  44:	33 c1       	rjmp	.+614    	; 0x2ac <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <read_adc>:
uint16_t read_adc(uint8_t chan) {
	//	if 8-bit precision only is required, then set the ADLAR bit and just read ADCH
	//ADMUX = (chan & ~0b00001111) | (1<<REFS0);
	//ADMUX = (1<<ADLAR) | chan;
	//ADMUX = (1<<ADLAR) | (1<<MUX1);
	ADMUX = chan;
  48:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN) | (1<<ADSC);
  4a:	80 ec       	ldi	r24, 0xC0	; 192
  4c:	86 b9       	out	0x06, r24	; 6
	asm volatile ("NOP" ::);
  4e:	00 00       	nop
    asm volatile ("NOP" ::);
  50:	00 00       	nop
	while ( ADCSRA & ( 1 << ADSC ) );
  52:	36 99       	sbic	0x06, 6	; 6
  54:	fe cf       	rjmp	.-4      	; 0x52 <read_adc+0xa>
	//return ADCH;
	uint8_t result_l = ADCL;
  56:	24 b1       	in	r18, 0x04	; 4
	uint8_t result_h = ADCH;
  58:	35 b1       	in	r19, 0x05	; 5
	return (result_h << 8) | result_l;
  5a:	93 2f       	mov	r25, r19
  5c:	80 e0       	ldi	r24, 0x00	; 0
  5e:	30 e0       	ldi	r19, 0x00	; 0
  60:	28 2b       	or	r18, r24
  62:	39 2b       	or	r19, r25
  64:	82 2f       	mov	r24, r18
  66:	93 2f       	mov	r25, r19
  68:	08 95       	ret

0000006a <main>:
#endif

uint16_t read_adc(uint8_t chan);

int main(void)
{
  6a:	1f 93       	push	r17
	unsigned char slaveAddress, temp;

	sei();
  6c:	78 94       	sei
  
	// enable the ADC circuitry, free-running mode, interrupt with /2 prescaler
	ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADPS2) | (1<<ADPS1);
  6e:	86 ec       	ldi	r24, 0xC6	; 198
  70:	86 b9       	out	0x06, r24	; 6
	// wait for complete conversion
	while ( ADCSRA & ( 1 << ADSC ) );    
  72:	36 99       	sbic	0x06, 6	; 6
  74:	fe cf       	rjmp	.-4      	; 0x72 <main+0x8>

	slaveAddress = 0x26;		// This can be change to your own address
  
	usiTwiSlaveInit(slaveAddress);
  76:	86 e2       	ldi	r24, 0x26	; 38
  78:	0b d0       	rcall	.+22     	; 0x90 <usiTwiSlaveInit>
	for(;;) {
		if(usiTwiDataInReceiveBuffer()) {
  7a:	4c d0       	rcall	.+152    	; 0x114 <usiTwiDataInReceiveBuffer>
  7c:	88 23       	and	r24, r24
  7e:	31 f0       	breq	.+12     	; 0x8c <main+0x22>
			temp = usiTwiReceiveByte();
  80:	35 d0       	rcall	.+106    	; 0xec <usiTwiReceiveByte>
			uint16_t v = read_adc(temp);
  82:	e2 df       	rcall	.-60     	; 0x48 <read_adc>
  84:	19 2f       	mov	r17, r25
			usiTwiTransmitByte((uint8_t)v);
  86:	22 d0       	rcall	.+68     	; 0xcc <usiTwiTransmitByte>
			usiTwiTransmitByte((uint8_t)(v >> 8));
  88:	81 2f       	mov	r24, r17
  8a:	20 d0       	rcall	.+64     	; 0xcc <usiTwiTransmitByte>
		}
	asm volatile ("NOP" ::);
  8c:	00 00       	nop
	}
  8e:	f5 cf       	rjmp	.-22     	; 0x7a <main+0x10>

00000090 <usiTwiSlaveInit>:
void
flushTwiBuffers(
  void
)
{
  rxTail = 0;
  90:	10 92 85 00 	sts	0x0085, r1
  rxHead = 0;
  94:	10 92 74 00 	sts	0x0074, r1
  txTail = 0;
  98:	10 92 63 00 	sts	0x0063, r1
  txHead = 0;
  9c:	10 92 62 00 	sts	0x0062, r1
)
{

  flushTwiBuffers( );

  slaveAddress = ownAddress;
  a0:	80 93 61 00 	sts	0x0061, r24
  // low when a start condition is detected or a counter overflow (only
  // for USIWM1, USIWM0 = 11).  This inserts a wait state.  SCL is released
  // by the ISRs (USI_START_vect and USI_OVERFLOW_vect).

  // Set SCL and SDA as output
  DDR_USI |= ( 1 << PORT_USI_SCL ) | ( 1 << PORT_USI_SDA );
  a4:	87 b3       	in	r24, 0x17	; 23
  a6:	85 60       	ori	r24, 0x05	; 5
  a8:	87 bb       	out	0x17, r24	; 23

  // set SCL high
  PORT_USI |= ( 1 << PORT_USI_SCL );
  aa:	c2 9a       	sbi	0x18, 2	; 24

  // set SDA high
  PORT_USI |= ( 1 << PORT_USI_SDA );
  ac:	c0 9a       	sbi	0x18, 0	; 24

  // Set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
  ae:	b8 98       	cbi	0x17, 0	; 23

  USICR =
  b0:	88 ea       	ldi	r24, 0xA8	; 168
  b2:	8d b9       	out	0x0d, r24	; 13
       // no toggle clock-port pin
       ( 0 << USITC );

  // clear all interrupt flags and reset overflow counter

  USISR = ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC );
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	8e b9       	out	0x0e, r24	; 14

} // end usiTwiSlaveInit
  b8:	08 95       	ret

000000ba <usiTwiDataInTransmitBuffer>:

bool usiTwiDataInTransmitBuffer(void)
{

  // return 0 (false) if the receive buffer is empty
  return txHead != txTail;
  ba:	20 91 62 00 	lds	r18, 0x0062
  be:	90 91 63 00 	lds	r25, 0x0063
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	29 17       	cp	r18, r25
  c6:	09 f4       	brne	.+2      	; 0xca <usiTwiDataInTransmitBuffer+0x10>
  c8:	80 e0       	ldi	r24, 0x00	; 0

} // end usiTwiDataInTransmitBuffer
  ca:	08 95       	ret

000000cc <usiTwiTransmitByte>:
{

  uint8_t tmphead;

  // calculate buffer index
  tmphead = ( txHead + 1 ) & TWI_TX_BUFFER_MASK;
  cc:	20 91 62 00 	lds	r18, 0x0062
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	2f 70       	andi	r18, 0x0F	; 15

  // wait for free space in buffer
  while ( tmphead == txTail );
  d4:	90 91 63 00 	lds	r25, 0x0063
  d8:	29 17       	cp	r18, r25
  da:	e1 f3       	breq	.-8      	; 0xd4 <usiTwiTransmitByte+0x8>

  // store data in buffer
  txBuf[ tmphead ] = data;
  dc:	e4 e6       	ldi	r30, 0x64	; 100
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	e2 0f       	add	r30, r18
  e2:	f1 1d       	adc	r31, r1
  e4:	80 83       	st	Z, r24

  // store new index
  txHead = tmphead;
  e6:	20 93 62 00 	sts	0x0062, r18

} // end usiTwiTransmitByte
  ea:	08 95       	ret

000000ec <usiTwiReceiveByte>:
  void
)
{

  // wait for Rx data
  while ( rxHead == rxTail );
  ec:	90 91 74 00 	lds	r25, 0x0074
  f0:	80 91 85 00 	lds	r24, 0x0085
  f4:	98 17       	cp	r25, r24
  f6:	d1 f3       	breq	.-12     	; 0xec <usiTwiReceiveByte>

  // calculate buffer index
  rxTail = ( rxTail + 1 ) & TWI_RX_BUFFER_MASK;
  f8:	80 91 85 00 	lds	r24, 0x0085
  fc:	8f 5f       	subi	r24, 0xFF	; 255
  fe:	8f 70       	andi	r24, 0x0F	; 15
 100:	80 93 85 00 	sts	0x0085, r24

  // return data from the buffer.
  return rxBuf[ rxTail ];
 104:	80 91 85 00 	lds	r24, 0x0085
 108:	e5 e7       	ldi	r30, 0x75	; 117
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	e8 0f       	add	r30, r24
 10e:	f1 1d       	adc	r31, r1

} // end usiTwiReceiveByte
 110:	80 81       	ld	r24, Z
 112:	08 95       	ret

00000114 <usiTwiDataInReceiveBuffer>:
  void
)
{

  // return 0 (false) if the receive buffer is empty
  return rxHead != rxTail;
 114:	20 91 74 00 	lds	r18, 0x0074
 118:	90 91 85 00 	lds	r25, 0x0085
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	29 17       	cp	r18, r25
 120:	09 f4       	brne	.+2      	; 0x124 <usiTwiDataInReceiveBuffer+0x10>
 122:	80 e0       	ldi	r24, 0x00	; 0

} // end usiTwiDataInReceiveBuffer
 124:	08 95       	ret

00000126 <__vector_7>:
                            USI Start Condition ISR

********************************************************************************/

ISR( USI_START_VECTOR )
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	8f 93       	push	r24

  // set default starting conditions for new TWI package
  overflowState = USI_SLAVE_CHECK_ADDRESS;
 132:	10 92 60 00 	sts	0x0060, r1

  // set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 136:	b8 98       	cbi	0x17, 0	; 23
  // wait for SCL to go low to ensure the Start Condition has completed (the
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence
  while (
 138:	b2 9b       	sbis	0x16, 2	; 22
 13a:	02 c0       	rjmp	.+4      	; 0x140 <__vector_7+0x1a>
       // SCL his high
       ( PIN_USI & ( 1 << PIN_USI_SCL ) ) &&
 13c:	b0 9b       	sbis	0x16, 0	; 22
 13e:	fc cf       	rjmp	.-8      	; 0x138 <__vector_7+0x12>
       // and SDA is low
       !( ( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
  );


  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
 140:	b0 99       	sbic	0x16, 0	; 22
 142:	03 c0       	rjmp	.+6      	; 0x14a <__vector_7+0x24>
  {

    // a Stop Condition did not occur

    USICR =
 144:	88 ef       	ldi	r24, 0xF8	; 248
 146:	8d b9       	out	0x0d, r24	; 13
 148:	02 c0       	rjmp	.+4      	; 0x14e <__vector_7+0x28>
  }
  else
  {

    // a Stop Condition did occur
    USICR =
 14a:	88 ea       	ldi	r24, 0xA8	; 168
 14c:	8d b9       	out	0x0d, r24	; 13
         // no toggle clock-port pin
         ( 0 << USITC );

  } // end if

  USISR =
 14e:	80 ef       	ldi	r24, 0xF0	; 240
 150:	8e b9       	out	0x0e, r24	; 14
       ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) |
       ( 1 << USIPF ) |( 1 << USIDC ) |
       // set USI to sample 8 bits (count 16 external SCL pin toggles)
       ( 0x0 << USICNT0);

} // end ISR( USI_START_VECTOR )
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <__vector_8>:
Only disabled when waiting for a new Start Condition.

********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	2f 93       	push	r18
 16a:	3f 93       	push	r19
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31

  switch ( overflowState )
 180:	80 91 60 00 	lds	r24, 0x0060
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	09 f4       	brne	.+2      	; 0x18a <__vector_8+0x2c>
 188:	5c c0       	rjmp	.+184    	; 0x242 <__vector_8+0xe4>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	30 f4       	brcc	.+12     	; 0x19a <__vector_8+0x3c>
 18e:	88 23       	and	r24, r24
 190:	69 f0       	breq	.+26     	; 0x1ac <__vector_8+0x4e>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	09 f0       	breq	.+2      	; 0x198 <__vector_8+0x3a>
 196:	79 c0       	rjmp	.+242    	; 0x28a <__stack+0x2b>
 198:	34 c0       	rjmp	.+104    	; 0x202 <__vector_8+0xa4>
 19a:	84 30       	cpi	r24, 0x04	; 4
 19c:	09 f4       	brne	.+2      	; 0x1a0 <__vector_8+0x42>
 19e:	59 c0       	rjmp	.+178    	; 0x252 <__vector_8+0xf4>
 1a0:	84 30       	cpi	r24, 0x04	; 4
 1a2:	38 f1       	brcs	.+78     	; 0x1f2 <__vector_8+0x94>
 1a4:	85 30       	cpi	r24, 0x05	; 5
 1a6:	09 f0       	breq	.+2      	; 0x1aa <__vector_8+0x4c>
 1a8:	70 c0       	rjmp	.+224    	; 0x28a <__stack+0x2b>
 1aa:	5a c0       	rjmp	.+180    	; 0x260 <__stack+0x1>
  {

    // Address mode: check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK,
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
 1ac:	8f b1       	in	r24, 0x0f	; 15
 1ae:	88 23       	and	r24, r24
 1b0:	31 f0       	breq	.+12     	; 0x1be <__vector_8+0x60>
 1b2:	9f b1       	in	r25, 0x0f	; 15
 1b4:	96 95       	lsr	r25
 1b6:	80 91 61 00 	lds	r24, 0x0061
 1ba:	98 17       	cp	r25, r24
 1bc:	a9 f4       	brne	.+42     	; 0x1e8 <__vector_8+0x8a>
      {
         // callback
         if(_onTwiDataRequest) _onTwiDataRequest();
 1be:	e0 91 86 00 	lds	r30, 0x0086
 1c2:	f0 91 87 00 	lds	r31, 0x0087
 1c6:	30 97       	sbiw	r30, 0x00	; 0
 1c8:	09 f0       	breq	.+2      	; 0x1cc <__vector_8+0x6e>
 1ca:	09 95       	icall
         if ( USIDR & 0x01 )
 1cc:	78 9b       	sbis	0x0f, 0	; 15
 1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <__vector_8+0x7a>
        {
          overflowState = USI_SLAVE_SEND_DATA;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 60 00 	sts	0x0060, r24
 1d6:	03 c0       	rjmp	.+6      	; 0x1de <__vector_8+0x80>
        }
        else
        {
          overflowState = USI_SLAVE_REQUEST_DATA;
 1d8:	84 e0       	ldi	r24, 0x04	; 4
 1da:	80 93 60 00 	sts	0x0060, r24
        } // end if
        SET_USI_TO_SEND_ACK( );
 1de:	1f b8       	out	0x0f, r1	; 15
 1e0:	b8 9a       	sbi	0x17, 0	; 23
 1e2:	8e e7       	ldi	r24, 0x7E	; 126
 1e4:	8e b9       	out	0x0e, r24	; 14
 1e6:	51 c0       	rjmp	.+162    	; 0x28a <__stack+0x2b>
      }
      else
      {
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 1e8:	88 ea       	ldi	r24, 0xA8	; 168
 1ea:	8d b9       	out	0x0d, r24	; 13
 1ec:	80 e7       	ldi	r24, 0x70	; 112
 1ee:	8e b9       	out	0x0e, r24	; 14
 1f0:	4c c0       	rjmp	.+152    	; 0x28a <__stack+0x2b>
      break;

    // Master write data mode: check reply and goto USI_SLAVE_SEND_DATA if OK,
    // else reset USI
    case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
      if ( USIDR )
 1f2:	8f b1       	in	r24, 0x0f	; 15
 1f4:	88 23       	and	r24, r24
 1f6:	29 f0       	breq	.+10     	; 0x202 <__vector_8+0xa4>
      {
        // if NACK, the master does not want more data
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 1f8:	88 ea       	ldi	r24, 0xA8	; 168
 1fa:	8d b9       	out	0x0d, r24	; 13
 1fc:	80 e7       	ldi	r24, 0x70	; 112
 1fe:	8e b9       	out	0x0e, r24	; 14
        return;
 200:	44 c0       	rjmp	.+136    	; 0x28a <__stack+0x2b>

    // copy data from buffer to USIDR and set USI to shift byte
    // next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
    case USI_SLAVE_SEND_DATA:
      // Get data from Buffer
      if ( txHead != txTail )
 202:	90 91 62 00 	lds	r25, 0x0062
 206:	80 91 63 00 	lds	r24, 0x0063
 20a:	98 17       	cp	r25, r24
 20c:	a9 f0       	breq	.+42     	; 0x238 <__vector_8+0xda>
      {
        txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
 20e:	80 91 63 00 	lds	r24, 0x0063
 212:	8f 5f       	subi	r24, 0xFF	; 255
 214:	8f 70       	andi	r24, 0x0F	; 15
 216:	80 93 63 00 	sts	0x0063, r24
        USIDR = txBuf[ txTail ];
 21a:	80 91 63 00 	lds	r24, 0x0063
 21e:	e4 e6       	ldi	r30, 0x64	; 100
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	e8 0f       	add	r30, r24
 224:	f1 1d       	adc	r31, r1
 226:	80 81       	ld	r24, Z
 228:	8f b9       	out	0x0f, r24	; 15
      {
        // the buffer is empty
        SET_USI_TO_TWI_START_CONDITION_MODE( );
        return;
      } // end if
      overflowState = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	80 93 60 00 	sts	0x0060, r24
      SET_USI_TO_SEND_DATA( );
 230:	b8 9a       	sbi	0x17, 0	; 23
 232:	80 e7       	ldi	r24, 0x70	; 112
 234:	8e b9       	out	0x0e, r24	; 14
      break;
 236:	29 c0       	rjmp	.+82     	; 0x28a <__stack+0x2b>
        USIDR = txBuf[ txTail ];
      }
      else
      {
        // the buffer is empty
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 238:	88 ea       	ldi	r24, 0xA8	; 168
 23a:	8d b9       	out	0x0d, r24	; 13
 23c:	80 e7       	ldi	r24, 0x70	; 112
 23e:	8e b9       	out	0x0e, r24	; 14
        return;
 240:	24 c0       	rjmp	.+72     	; 0x28a <__stack+0x2b>
      break;

    // set USI to sample reply from master
    // next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
    case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
      overflowState = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
 242:	83 e0       	ldi	r24, 0x03	; 3
 244:	80 93 60 00 	sts	0x0060, r24
      SET_USI_TO_READ_ACK( );
 248:	b8 98       	cbi	0x17, 0	; 23
 24a:	1f b8       	out	0x0f, r1	; 15
 24c:	8e e7       	ldi	r24, 0x7E	; 126
 24e:	8e b9       	out	0x0e, r24	; 14
      break;
 250:	1c c0       	rjmp	.+56     	; 0x28a <__stack+0x2b>

    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 252:	85 e0       	ldi	r24, 0x05	; 5
 254:	80 93 60 00 	sts	0x0060, r24
      SET_USI_TO_READ_DATA( );
 258:	b8 98       	cbi	0x17, 0	; 23
 25a:	80 e7       	ldi	r24, 0x70	; 112
 25c:	8e b9       	out	0x0e, r24	; 14
      break;
 25e:	15 c0       	rjmp	.+42     	; 0x28a <__stack+0x2b>
    // copy data from USIDR and send ACK
    // next USI_SLAVE_REQUEST_DATA
    case USI_SLAVE_GET_DATA_AND_SEND_ACK:
      // put data into buffer
      // Not necessary, but prevents warnings
      rxHead = ( rxHead + 1 ) & TWI_RX_BUFFER_MASK;
 260:	80 91 74 00 	lds	r24, 0x0074
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	8f 70       	andi	r24, 0x0F	; 15
 268:	80 93 74 00 	sts	0x0074, r24
      rxBuf[ rxHead ] = USIDR;
 26c:	90 91 74 00 	lds	r25, 0x0074
 270:	8f b1       	in	r24, 0x0f	; 15
 272:	e5 e7       	ldi	r30, 0x75	; 117
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	e9 0f       	add	r30, r25
 278:	f1 1d       	adc	r31, r1
 27a:	80 83       	st	Z, r24
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
 27c:	84 e0       	ldi	r24, 0x04	; 4
 27e:	80 93 60 00 	sts	0x0060, r24
      SET_USI_TO_SEND_ACK( );
 282:	1f b8       	out	0x0f, r1	; 15
 284:	b8 9a       	sbi	0x17, 0	; 23
 286:	8e e7       	ldi	r24, 0x7E	; 126
 288:	8e b9       	out	0x0e, r24	; 14
      break;

  } // end switch

} // end ISR( USI_OVERFLOW_VECTOR )
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	bf 91       	pop	r27
 290:	af 91       	pop	r26
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	7f 91       	pop	r23
 298:	6f 91       	pop	r22
 29a:	5f 91       	pop	r21
 29c:	4f 91       	pop	r20
 29e:	3f 91       	pop	r19
 2a0:	2f 91       	pop	r18
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
