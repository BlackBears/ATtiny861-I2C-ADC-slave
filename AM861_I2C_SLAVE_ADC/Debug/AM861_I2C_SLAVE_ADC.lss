
AM861_I2C_SLAVE_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000028  00800060  00800060  00000358  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000abb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000110  00000000  00000000  00000afb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000444  00000000  00000000  00000c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001ff  00000000  00000000  0000104f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000577  00000000  00000000  0000124e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  000017c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000349  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e9  00000000  00000000  00001bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000006c  00000000  00000000  00001cba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	a5 c0       	rjmp	.+330    	; 0x15a <__vector_7>
  10:	c0 c0       	rjmp	.+384    	; 0x192 <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d2 e0       	ldi	r29, 0x02	; 2
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a8 38       	cpi	r26, 0x88	; 136
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	25 d0       	rcall	.+74     	; 0x8e <main>
  44:	4d c1       	rjmp	.+666    	; 0x2e0 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <read_adc>:
}

//	read selected channel with 10-bit precision
uint16_t read_adc(uint8_t chan) {
	//	if 8-bit precision only is required, then set the ADLAR bit and just read ADCH
	ADMUX = chan;
  48:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN) | (1<<ADSC);
  4a:	80 ec       	ldi	r24, 0xC0	; 192
  4c:	86 b9       	out	0x06, r24	; 6
	asm volatile ("NOP" ::);
  4e:	00 00       	nop
    asm volatile ("NOP" ::);
  50:	00 00       	nop
	while ( ADCSRA & ( 1 << ADSC ) );
  52:	36 99       	sbic	0x06, 6	; 6
  54:	fe cf       	rjmp	.-4      	; 0x52 <read_adc+0xa>
	uint8_t result_l = ADCL;
  56:	24 b1       	in	r18, 0x04	; 4
	uint8_t result_h = ADCH;
  58:	35 b1       	in	r19, 0x05	; 5
	return (result_h << 8) | result_l;
  5a:	93 2f       	mov	r25, r19
  5c:	80 e0       	ldi	r24, 0x00	; 0
  5e:	30 e0       	ldi	r19, 0x00	; 0
  60:	28 2b       	or	r18, r24
  62:	39 2b       	or	r19, r25
}
  64:	82 2f       	mov	r24, r18
  66:	93 2f       	mov	r25, r19
  68:	08 95       	ret

0000006a <read_temp>:

uint16_t read_temp(void) {
	//	MUX5..0 set to 0b111111 to enable special ADC11 channel
	//	set 1.1V internal reference
	ADMUX = (1<<REFS1) | (1<<MUX4) | (1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0) ;
  6a:	8f e9       	ldi	r24, 0x9F	; 159
  6c:	87 b9       	out	0x07, r24	; 7
	ADCSRB |= (1<<MUX5);
  6e:	1b 9a       	sbi	0x03, 3	; 3
	asm volatile ("NOP" ::);
  70:	00 00       	nop
    asm volatile ("NOP" ::);
  72:	00 00       	nop
	while ( ADCSRA & ( 1 << ADSC ) );
  74:	36 99       	sbic	0x06, 6	; 6
  76:	fe cf       	rjmp	.-4      	; 0x74 <read_temp+0xa>
	uint8_t result_l = ADCL;
  78:	24 b1       	in	r18, 0x04	; 4
	uint8_t result_h = ADCH;
  7a:	35 b1       	in	r19, 0x05	; 5
	ADCSRB &= ~(1<<MUX5);
  7c:	1b 98       	cbi	0x03, 3	; 3
	return (result_h << 8) | result_l;
  7e:	93 2f       	mov	r25, r19
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	28 2b       	or	r18, r24
  86:	39 2b       	or	r19, r25
  88:	82 2f       	mov	r24, r18
  8a:	93 2f       	mov	r25, r19
  8c:	08 95       	ret

0000008e <main>:

uint16_t read_adc(uint8_t chan);
uint16_t read_temp(void);

int main(void)
{
  8e:	1f 93       	push	r17
	DDRB |= (1<<PB6);
  90:	be 9a       	sbi	0x17, 6	; 23
	
	PORTB |= (1<<PB6);
  92:	c6 9a       	sbi	0x18, 6	; 24
	unsigned char slaveAddress, temp;

	sei();
  94:	78 94       	sei
  
	// enable the ADC circuitry, free-running mode, interrupt with /2 prescaler
	ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADPS2) | (1<<ADPS1);
  96:	86 ec       	ldi	r24, 0xC6	; 198
  98:	86 b9       	out	0x06, r24	; 6
	// wait for complete conversion
	while ( ADCSRA & ( 1 << ADSC ) );    
  9a:	36 99       	sbic	0x06, 6	; 6
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0xc>

	slaveAddress = 0x26;		// This can be change to your own address
  
	usiTwiSlaveInit(slaveAddress);
  9e:	86 e2       	ldi	r24, 0x26	; 38
  a0:	11 d0       	rcall	.+34     	; 0xc4 <usiTwiSlaveInit>
	for(;;) {
		if(usiTwiDataInReceiveBuffer()) {
  a2:	52 d0       	rcall	.+164    	; 0x148 <usiTwiDataInReceiveBuffer>
  a4:	88 23       	and	r24, r24
  a6:	61 f0       	breq	.+24     	; 0xc0 <main+0x32>
			uint16_t v;
			adc_code_t code = (adc_code_t)usiTwiReceiveByte();
  a8:	3b d0       	rcall	.+118    	; 0x120 <usiTwiReceiveByte>
			if( code == RADCT ) {
  aa:	8f 33       	cpi	r24, 0x3F	; 63
  ac:	21 f4       	brne	.+8      	; 0xb6 <main+0x28>
				PORTB &= ~(1<<PB6);
  ae:	c6 98       	cbi	0x18, 6	; 24
				v = read_temp();
  b0:	dc df       	rcall	.-72     	; 0x6a <read_temp>
  b2:	19 2f       	mov	r17, r25
  b4:	02 c0       	rjmp	.+4      	; 0xba <main+0x2c>
			}
			else {
				v = read_adc((uint8_t)code);
  b6:	c8 df       	rcall	.-112    	; 0x48 <read_adc>
  b8:	19 2f       	mov	r17, r25
			}
			usiTwiTransmitByte((uint8_t)v);
  ba:	22 d0       	rcall	.+68     	; 0x100 <usiTwiTransmitByte>
			usiTwiTransmitByte((uint8_t)(v >> 8));
  bc:	81 2f       	mov	r24, r17
  be:	20 d0       	rcall	.+64     	; 0x100 <usiTwiTransmitByte>
		}
	asm volatile ("NOP" ::);
  c0:	00 00       	nop
	}
  c2:	ef cf       	rjmp	.-34     	; 0xa2 <main+0x14>

000000c4 <usiTwiSlaveInit>:
void
flushTwiBuffers(
  void
)
{
  rxTail = 0;
  c4:	10 92 85 00 	sts	0x0085, r1
  rxHead = 0;
  c8:	10 92 74 00 	sts	0x0074, r1
  txTail = 0;
  cc:	10 92 63 00 	sts	0x0063, r1
  txHead = 0;
  d0:	10 92 62 00 	sts	0x0062, r1
)
{

  flushTwiBuffers( );

  slaveAddress = ownAddress;
  d4:	80 93 61 00 	sts	0x0061, r24
  // low when a start condition is detected or a counter overflow (only
  // for USIWM1, USIWM0 = 11).  This inserts a wait state.  SCL is released
  // by the ISRs (USI_START_vect and USI_OVERFLOW_vect).

  // Set SCL and SDA as output
  DDR_USI |= ( 1 << PORT_USI_SCL ) | ( 1 << PORT_USI_SDA );
  d8:	87 b3       	in	r24, 0x17	; 23
  da:	85 60       	ori	r24, 0x05	; 5
  dc:	87 bb       	out	0x17, r24	; 23

  // set SCL high
  PORT_USI |= ( 1 << PORT_USI_SCL );
  de:	c2 9a       	sbi	0x18, 2	; 24

  // set SDA high
  PORT_USI |= ( 1 << PORT_USI_SDA );
  e0:	c0 9a       	sbi	0x18, 0	; 24

  // Set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
  e2:	b8 98       	cbi	0x17, 0	; 23

  USICR =
  e4:	88 ea       	ldi	r24, 0xA8	; 168
  e6:	8d b9       	out	0x0d, r24	; 13
       // no toggle clock-port pin
       ( 0 << USITC );

  // clear all interrupt flags and reset overflow counter

  USISR = ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC );
  e8:	80 ef       	ldi	r24, 0xF0	; 240
  ea:	8e b9       	out	0x0e, r24	; 14

} // end usiTwiSlaveInit
  ec:	08 95       	ret

000000ee <usiTwiDataInTransmitBuffer>:

bool usiTwiDataInTransmitBuffer(void)
{

  // return 0 (false) if the receive buffer is empty
  return txHead != txTail;
  ee:	20 91 62 00 	lds	r18, 0x0062
  f2:	90 91 63 00 	lds	r25, 0x0063
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	29 17       	cp	r18, r25
  fa:	09 f4       	brne	.+2      	; 0xfe <usiTwiDataInTransmitBuffer+0x10>
  fc:	80 e0       	ldi	r24, 0x00	; 0

} // end usiTwiDataInTransmitBuffer
  fe:	08 95       	ret

00000100 <usiTwiTransmitByte>:
{

  uint8_t tmphead;

  // calculate buffer index
  tmphead = ( txHead + 1 ) & TWI_TX_BUFFER_MASK;
 100:	20 91 62 00 	lds	r18, 0x0062
 104:	2f 5f       	subi	r18, 0xFF	; 255
 106:	2f 70       	andi	r18, 0x0F	; 15

  // wait for free space in buffer
  while ( tmphead == txTail );
 108:	90 91 63 00 	lds	r25, 0x0063
 10c:	29 17       	cp	r18, r25
 10e:	e1 f3       	breq	.-8      	; 0x108 <usiTwiTransmitByte+0x8>

  // store data in buffer
  txBuf[ tmphead ] = data;
 110:	e4 e6       	ldi	r30, 0x64	; 100
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	e2 0f       	add	r30, r18
 116:	f1 1d       	adc	r31, r1
 118:	80 83       	st	Z, r24

  // store new index
  txHead = tmphead;
 11a:	20 93 62 00 	sts	0x0062, r18

} // end usiTwiTransmitByte
 11e:	08 95       	ret

00000120 <usiTwiReceiveByte>:
  void
)
{

  // wait for Rx data
  while ( rxHead == rxTail );
 120:	90 91 74 00 	lds	r25, 0x0074
 124:	80 91 85 00 	lds	r24, 0x0085
 128:	98 17       	cp	r25, r24
 12a:	d1 f3       	breq	.-12     	; 0x120 <usiTwiReceiveByte>

  // calculate buffer index
  rxTail = ( rxTail + 1 ) & TWI_RX_BUFFER_MASK;
 12c:	80 91 85 00 	lds	r24, 0x0085
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	8f 70       	andi	r24, 0x0F	; 15
 134:	80 93 85 00 	sts	0x0085, r24

  // return data from the buffer.
  return rxBuf[ rxTail ];
 138:	80 91 85 00 	lds	r24, 0x0085
 13c:	e5 e7       	ldi	r30, 0x75	; 117
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	e8 0f       	add	r30, r24
 142:	f1 1d       	adc	r31, r1

} // end usiTwiReceiveByte
 144:	80 81       	ld	r24, Z
 146:	08 95       	ret

00000148 <usiTwiDataInReceiveBuffer>:
  void
)
{

  // return 0 (false) if the receive buffer is empty
  return rxHead != rxTail;
 148:	20 91 74 00 	lds	r18, 0x0074
 14c:	90 91 85 00 	lds	r25, 0x0085
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	29 17       	cp	r18, r25
 154:	09 f4       	brne	.+2      	; 0x158 <usiTwiDataInReceiveBuffer+0x10>
 156:	80 e0       	ldi	r24, 0x00	; 0

} // end usiTwiDataInReceiveBuffer
 158:	08 95       	ret

0000015a <__vector_7>:
                            USI Start Condition ISR

********************************************************************************/

ISR( USI_START_VECTOR )
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24

  // set default starting conditions for new TWI package
  overflowState = USI_SLAVE_CHECK_ADDRESS;
 166:	10 92 60 00 	sts	0x0060, r1

  // set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 16a:	b8 98       	cbi	0x17, 0	; 23
  // wait for SCL to go low to ensure the Start Condition has completed (the
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence
  while (
 16c:	b2 9b       	sbis	0x16, 2	; 22
 16e:	02 c0       	rjmp	.+4      	; 0x174 <__vector_7+0x1a>
       // SCL his high
       ( PIN_USI & ( 1 << PIN_USI_SCL ) ) &&
 170:	b0 9b       	sbis	0x16, 0	; 22
 172:	fc cf       	rjmp	.-8      	; 0x16c <__vector_7+0x12>
       // and SDA is low
       !( ( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
  );


  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
 174:	b0 99       	sbic	0x16, 0	; 22
 176:	03 c0       	rjmp	.+6      	; 0x17e <__vector_7+0x24>
  {

    // a Stop Condition did not occur

    USICR =
 178:	88 ef       	ldi	r24, 0xF8	; 248
 17a:	8d b9       	out	0x0d, r24	; 13
 17c:	02 c0       	rjmp	.+4      	; 0x182 <__vector_7+0x28>
  }
  else
  {

    // a Stop Condition did occur
    USICR =
 17e:	88 ea       	ldi	r24, 0xA8	; 168
 180:	8d b9       	out	0x0d, r24	; 13
         // no toggle clock-port pin
         ( 0 << USITC );

  } // end if

  USISR =
 182:	80 ef       	ldi	r24, 0xF0	; 240
 184:	8e b9       	out	0x0e, r24	; 14
       ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) |
       ( 1 << USIPF ) |( 1 << USIDC ) |
       // set USI to sample 8 bits (count 16 external SCL pin toggles)
       ( 0x0 << USICNT0);

} // end ISR( USI_START_VECTOR )
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <__vector_8>:
Only disabled when waiting for a new Start Condition.

********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	2f 93       	push	r18
 19e:	3f 93       	push	r19
 1a0:	4f 93       	push	r20
 1a2:	5f 93       	push	r21
 1a4:	6f 93       	push	r22
 1a6:	7f 93       	push	r23
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
 1ac:	af 93       	push	r26
 1ae:	bf 93       	push	r27
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31

  switch ( overflowState )
 1b4:	80 91 60 00 	lds	r24, 0x0060
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	09 f4       	brne	.+2      	; 0x1be <__vector_8+0x2c>
 1bc:	5c c0       	rjmp	.+184    	; 0x276 <__stack+0x17>
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	30 f4       	brcc	.+12     	; 0x1ce <__vector_8+0x3c>
 1c2:	88 23       	and	r24, r24
 1c4:	69 f0       	breq	.+26     	; 0x1e0 <__vector_8+0x4e>
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	09 f0       	breq	.+2      	; 0x1cc <__vector_8+0x3a>
 1ca:	79 c0       	rjmp	.+242    	; 0x2be <__stack+0x5f>
 1cc:	34 c0       	rjmp	.+104    	; 0x236 <__vector_8+0xa4>
 1ce:	84 30       	cpi	r24, 0x04	; 4
 1d0:	09 f4       	brne	.+2      	; 0x1d4 <__vector_8+0x42>
 1d2:	59 c0       	rjmp	.+178    	; 0x286 <__stack+0x27>
 1d4:	84 30       	cpi	r24, 0x04	; 4
 1d6:	38 f1       	brcs	.+78     	; 0x226 <__vector_8+0x94>
 1d8:	85 30       	cpi	r24, 0x05	; 5
 1da:	09 f0       	breq	.+2      	; 0x1de <__vector_8+0x4c>
 1dc:	70 c0       	rjmp	.+224    	; 0x2be <__stack+0x5f>
 1de:	5a c0       	rjmp	.+180    	; 0x294 <__stack+0x35>
  {

    // Address mode: check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK,
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
 1e0:	8f b1       	in	r24, 0x0f	; 15
 1e2:	88 23       	and	r24, r24
 1e4:	31 f0       	breq	.+12     	; 0x1f2 <__vector_8+0x60>
 1e6:	9f b1       	in	r25, 0x0f	; 15
 1e8:	96 95       	lsr	r25
 1ea:	80 91 61 00 	lds	r24, 0x0061
 1ee:	98 17       	cp	r25, r24
 1f0:	a9 f4       	brne	.+42     	; 0x21c <__vector_8+0x8a>
      {
         // callback
         if(_onTwiDataRequest) _onTwiDataRequest();
 1f2:	e0 91 86 00 	lds	r30, 0x0086
 1f6:	f0 91 87 00 	lds	r31, 0x0087
 1fa:	30 97       	sbiw	r30, 0x00	; 0
 1fc:	09 f0       	breq	.+2      	; 0x200 <__vector_8+0x6e>
 1fe:	09 95       	icall
         if ( USIDR & 0x01 )
 200:	78 9b       	sbis	0x0f, 0	; 15
 202:	04 c0       	rjmp	.+8      	; 0x20c <__vector_8+0x7a>
        {
          overflowState = USI_SLAVE_SEND_DATA;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 93 60 00 	sts	0x0060, r24
 20a:	03 c0       	rjmp	.+6      	; 0x212 <__vector_8+0x80>
        }
        else
        {
          overflowState = USI_SLAVE_REQUEST_DATA;
 20c:	84 e0       	ldi	r24, 0x04	; 4
 20e:	80 93 60 00 	sts	0x0060, r24
        } // end if
        SET_USI_TO_SEND_ACK( );
 212:	1f b8       	out	0x0f, r1	; 15
 214:	b8 9a       	sbi	0x17, 0	; 23
 216:	8e e7       	ldi	r24, 0x7E	; 126
 218:	8e b9       	out	0x0e, r24	; 14
 21a:	51 c0       	rjmp	.+162    	; 0x2be <__stack+0x5f>
      }
      else
      {
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 21c:	88 ea       	ldi	r24, 0xA8	; 168
 21e:	8d b9       	out	0x0d, r24	; 13
 220:	80 e7       	ldi	r24, 0x70	; 112
 222:	8e b9       	out	0x0e, r24	; 14
 224:	4c c0       	rjmp	.+152    	; 0x2be <__stack+0x5f>
      break;

    // Master write data mode: check reply and goto USI_SLAVE_SEND_DATA if OK,
    // else reset USI
    case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
      if ( USIDR )
 226:	8f b1       	in	r24, 0x0f	; 15
 228:	88 23       	and	r24, r24
 22a:	29 f0       	breq	.+10     	; 0x236 <__vector_8+0xa4>
      {
        // if NACK, the master does not want more data
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 22c:	88 ea       	ldi	r24, 0xA8	; 168
 22e:	8d b9       	out	0x0d, r24	; 13
 230:	80 e7       	ldi	r24, 0x70	; 112
 232:	8e b9       	out	0x0e, r24	; 14
        return;
 234:	44 c0       	rjmp	.+136    	; 0x2be <__stack+0x5f>

    // copy data from buffer to USIDR and set USI to shift byte
    // next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
    case USI_SLAVE_SEND_DATA:
      // Get data from Buffer
      if ( txHead != txTail )
 236:	90 91 62 00 	lds	r25, 0x0062
 23a:	80 91 63 00 	lds	r24, 0x0063
 23e:	98 17       	cp	r25, r24
 240:	a9 f0       	breq	.+42     	; 0x26c <__stack+0xd>
      {
        txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
 242:	80 91 63 00 	lds	r24, 0x0063
 246:	8f 5f       	subi	r24, 0xFF	; 255
 248:	8f 70       	andi	r24, 0x0F	; 15
 24a:	80 93 63 00 	sts	0x0063, r24
        USIDR = txBuf[ txTail ];
 24e:	80 91 63 00 	lds	r24, 0x0063
 252:	e4 e6       	ldi	r30, 0x64	; 100
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	e8 0f       	add	r30, r24
 258:	f1 1d       	adc	r31, r1
 25a:	80 81       	ld	r24, Z
 25c:	8f b9       	out	0x0f, r24	; 15
      {
        // the buffer is empty
        SET_USI_TO_TWI_START_CONDITION_MODE( );
        return;
      } // end if
      overflowState = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	80 93 60 00 	sts	0x0060, r24
      SET_USI_TO_SEND_DATA( );
 264:	b8 9a       	sbi	0x17, 0	; 23
 266:	80 e7       	ldi	r24, 0x70	; 112
 268:	8e b9       	out	0x0e, r24	; 14
      break;
 26a:	29 c0       	rjmp	.+82     	; 0x2be <__stack+0x5f>
        USIDR = txBuf[ txTail ];
      }
      else
      {
        // the buffer is empty
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 26c:	88 ea       	ldi	r24, 0xA8	; 168
 26e:	8d b9       	out	0x0d, r24	; 13
 270:	80 e7       	ldi	r24, 0x70	; 112
 272:	8e b9       	out	0x0e, r24	; 14
        return;
 274:	24 c0       	rjmp	.+72     	; 0x2be <__stack+0x5f>
      break;

    // set USI to sample reply from master
    // next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
    case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
      overflowState = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	80 93 60 00 	sts	0x0060, r24
      SET_USI_TO_READ_ACK( );
 27c:	b8 98       	cbi	0x17, 0	; 23
 27e:	1f b8       	out	0x0f, r1	; 15
 280:	8e e7       	ldi	r24, 0x7E	; 126
 282:	8e b9       	out	0x0e, r24	; 14
      break;
 284:	1c c0       	rjmp	.+56     	; 0x2be <__stack+0x5f>

    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 286:	85 e0       	ldi	r24, 0x05	; 5
 288:	80 93 60 00 	sts	0x0060, r24
      SET_USI_TO_READ_DATA( );
 28c:	b8 98       	cbi	0x17, 0	; 23
 28e:	80 e7       	ldi	r24, 0x70	; 112
 290:	8e b9       	out	0x0e, r24	; 14
      break;
 292:	15 c0       	rjmp	.+42     	; 0x2be <__stack+0x5f>
    // copy data from USIDR and send ACK
    // next USI_SLAVE_REQUEST_DATA
    case USI_SLAVE_GET_DATA_AND_SEND_ACK:
      // put data into buffer
      // Not necessary, but prevents warnings
      rxHead = ( rxHead + 1 ) & TWI_RX_BUFFER_MASK;
 294:	80 91 74 00 	lds	r24, 0x0074
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	8f 70       	andi	r24, 0x0F	; 15
 29c:	80 93 74 00 	sts	0x0074, r24
      rxBuf[ rxHead ] = USIDR;
 2a0:	90 91 74 00 	lds	r25, 0x0074
 2a4:	8f b1       	in	r24, 0x0f	; 15
 2a6:	e5 e7       	ldi	r30, 0x75	; 117
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	e9 0f       	add	r30, r25
 2ac:	f1 1d       	adc	r31, r1
 2ae:	80 83       	st	Z, r24
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
 2b0:	84 e0       	ldi	r24, 0x04	; 4
 2b2:	80 93 60 00 	sts	0x0060, r24
      SET_USI_TO_SEND_ACK( );
 2b6:	1f b8       	out	0x0f, r1	; 15
 2b8:	b8 9a       	sbi	0x17, 0	; 23
 2ba:	8e e7       	ldi	r24, 0x7E	; 126
 2bc:	8e b9       	out	0x0e, r24	; 14
      break;

  } // end switch

} // end ISR( USI_OVERFLOW_VECTOR )
 2be:	ff 91       	pop	r31
 2c0:	ef 91       	pop	r30
 2c2:	bf 91       	pop	r27
 2c4:	af 91       	pop	r26
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	7f 91       	pop	r23
 2cc:	6f 91       	pop	r22
 2ce:	5f 91       	pop	r21
 2d0:	4f 91       	pop	r20
 2d2:	3f 91       	pop	r19
 2d4:	2f 91       	pop	r18
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	1f 90       	pop	r1
 2de:	18 95       	reti

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
